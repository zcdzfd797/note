什么叫做生命周期？
	一个组件从创建到销毁的这一过程，叫做生命周期(钩子)函数。
生命周期经历的过程：
	beforeCreate:创建前 --- 此函数有初始化的作用。在这个生命周期函数里面我们可以进行加载动画的loading。
	
	created:创建后 ---	此函数承接beforeCreate后执行，将data和methods中的属性与方法遍历挂载到vue实例上、并给data中的每一个属性添加getter、setter方法。此外，在这个生命周期函数内可以进行ajax的数据请求。
	
	beforeMount:挂载前 ---
	数据与template模版结合前
	
	mounted:挂载后 ---	数据和模版结合，生成真正的DOM结构。这里可以通过$refs 获取真实的DOM结构
	
	beforeUpdate:更新前 ---	当data中的数据发生改变时执行该生命周期函数。可对data数据做最后的修改。在这里访问到的DOM结构是未更新前的DOM结构。
	
	updated:更新后 ---
	获取数据最新DOM结构。可检测数据是否更新。
	
	
	
组件传值通信方式？
	父组件传递子组件 ---
		1.给在父组件中当做标签使用的子组件（标签）绑定一个属性，值为需要传递的值；
		2.在子组件中通过props进行接收；（数组接收、对象接收（key为绑定的属性，val是当前传递过来的值的类型）），props专门用来接收外部属性。
	子传父
		当子组件在父组件中当做标签使用的时候，给子组件添加一个自定义事件，在子组件中通过this.$emit触发这个自定义事件，实现数据的传值
			ps：自定义的事件函数不需要加（）
			
	非父子组件传值
		通过事件监听 --- $on 绑定事件 --- 接收值  $emit 触发事件 --- 传递值
			方案一 ：给公共的vue原型对象身上添加一个vue实例，让需要非父子组件通讯的组件使用同一个$on 和 $emit 创建的一方 调用$emit 接收值的一方在created中使用$on 
			方案二 ：手动封装 参考观察者模式 建立 observer.js
obsever.js 
	****************
	*******
	
methods computed watch三者之间的区别？
	methods ---  里面存放的方法，每次调用的时候都需要事件来驱动
	computed --- 计算属性
				 1.只要data中的属性发生了改变，就会触发computed里面的方法;
				 2.computed里面的方法，调用时不需要加();
				 3.data里面的属性如果没有发生改变时，会从缓存中读取最终的一个结果
	watch ---   1.方法不需要调用
				2.方法有两个参数（新值，旧值）
				3.方法名称是data中的key值
				4.data中的属性值是一个对象的情况下需要进行一个深度监听 --- 设置 deep：true
				
事件绑定
	$on 事件绑定 —————— 参数：事件名称，回调函数
	$once 只绑定1次
	$emit 事件触发 —————— 参数：事件名称，需传递的参数
	$off 事件的解绑 —————— 参数：事件名称，需解绑的非匿名函数名
	
	
动态组件
	将多个组件挂载在同一挂载点上，通过js属性 动态切换组件 --- <component is=""></component>
				 
什么叫做路由
	根据用户请求路径、返回的数据与页面 分为 ：前端路由 后端路由
		前端路由: 根据用户请求路径的不同 在当前页面渲染不同的数据。通过hash和history模式进行路径的切换
		后端路由：根据用户请求路径的不同，返回不同数据和页面
	
	
keep-alive 的作用？
	是vue中的一个内置组件，将包裹的(动态)组件,在未活跃时，存入缓存中，不走生命周期的销毁
	下一次进入活跃状态时，直接从缓存中读取，无需重新创建

什么是单向数据流？
	当父组件给子组件传递数据的时候，因规定其数据是单向流动，因此子组件不能直接修改父组件的值；
	
	
❤❤ 过滤器 filter？
	过滤器：全局 局部
	组件内部使用过滤器的时候需要在export defualt 中书写key filters 
	管道符 |  管道符后面书写  过滤器名称
	
slot插槽：
	slot 是Vue中内置组件 —— 因此不会被当做标签渲染到页面上
	当组件当做标签进行使用的时候，如果需要在组件标签内书写html标签时，需要在组件内部使用slot插槽进行接收，否则无法使用
	slot 如果没有name属性的时候，会接受所有的标签，如果想要将书写的HTML标签放在指定的位置时，我们需要指定当前HTML一个slot类名
		在组件的内部给slot标签添加name属性 值为 html中slot的值。这样书写可以让我们组件更加灵活
		封装组件时，可以使组件更加灵活 复用性强
		
插槽作用域：
	带参数的插槽 
		优势：可以将子组件的数据传递到父组件
			当组件标签内部的HTML标签的数据想要通过组件内部传递过来进行使用的时候，首先需要在组装件标签内部书写template标签 定义scope属性
		在组件中通过自定义属性将数据传递到父组件中通过scope的值进行接受。
		
路由的配置项 参数：
	path:路由的路径
	component：当前路径匹配成功时渲染的组件
	redirect：重定向
	children：路由的嵌套（子路由）
				--- children 值为一个数组，数组中每一个对象都是一个子路由的配置项
				
路由传值？
	1.动态路由传值 ： params
	路由的配置项上面需要定义属性 通过/:属性  当路由在路由跳转的时候定义
		路由接收值？
			通过this.$route.params 来接受收递过来的值
	2.query传值
		? 问号后面的参数，在路由跳转时，通过问号做数据的拼接。
			接收的时候用 this.$route.query 进行接收
	两者区别：
		params必须传值，query不是必须

命名路由 ： 给当前路由的配置项添加一个name属性


路由解耦：
	1.只支持动态路由
	2.文件夹router下index.js 定义路由 props为true
	3.在需要接收数据的组件中 通过props进行接收传递过来的参数